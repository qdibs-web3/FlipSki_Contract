VRF verified contract (Base Sepolia Testnet) = 0xc7eff13c45D82006781571Cd9C058596be167Cbc

UPGRADED VRF verified contract (Base Sepolia Testnet) = 0xDb0AA2617442B3bf0c3DE0a55530621D708d3a57
------------------------------------------------------------------------------------------------

npx hardhat run scripts/deploy.js --network baseSepolia

npx hardhat verify --network baseSepolia 0xDb0AA2617442B3bf0c3DE0a55530621D708d3a57 "0xED946D2F962cF5207E209CE0F16b629A293d0A8F" 1000 "10000000000000000" "1000000000000000" "0x5C210eF41CD1a72de73bF76eC39637bB0d3d7BEE" "735567865254146982589629849288344123898350234912932034375983834189117400818" "0x9e1344a1247c8a1785d0a4681a27152bffdb43666ae5bf7d14d24a5efd44bf71"

const vrfCoordinatorAddress = "0x5C210eF41CD1a72de73bF76eC39637bB0d3d7BEE"; // VRF Coordinator V2.5 for Base Sepolia
const subscriptionId = "735567865254146982589629849288344123898350234912932034375983834189117400818"; // REPLACE WITH YOUR ACTUAL SUBSCRIPTION ID (uint64)
const keyHash = "0x9e1344a1247c8a1785d0a4681a27152bffdb43666ae5bf7d14d24a5efd44bf71"; // Example Key Hash for Base Sepolia (30 gwei)




notes from contract:

    // VRF Variables
    IVRFCoordinatorV2Plus private immutable VRF_COORDINATOR;
    uint256 private s_subscriptionId;
    bytes32 private s_keyHash; // Gas lane for Base Sepolia (e.g., 30 gwei key hash)
    uint32 private s_callbackGasLimit = 300000; // Default callback gas limit, configurable by owner
    uint16 private constant REQUEST_CONFIRMATIONS = 3; // Minimum number of confirmations for VRF request
    uint32 private constant NUM_WORDS = 1; // Requesting one random word for heads/tails

    // Game Variables
    address payable public feeWallet;
    uint256 public feePercentage; // Basis points, e.g., 1000 for 10%
    uint256 public maxWager;
    uint256 public minWager;



    struct Game {
        address player;
        CoinSide choice;
        uint256 wagerAmount;
        uint256 feeAmount; // Calculated at settlement
        uint256 payoutAmount; // Calculated at settlement
        CoinSide result; // Set by VRF in fulfillRandomWords
        bool requested; // True when VRF request is made, false after fulfillment starts
        bool settled;   // True when VRF callback is processed and game is fully settled
        uint256 vrfRequestId; // To link VRF request to the game
    }

    uint256 public gameIdCounter;
    mapping(uint256 => Game) public games; // gameId => Game details
    mapping(uint256 => uint256) public vrfRequestToGameId; // vrfRequestId => gameId

    // Events
    event GameRequested(uint256 indexed gameId, address indexed player, CoinSide choice, uint256 wagerAmount, uint256 indexed vrfRequestId);
    event GameSettled(uint256 indexed gameId, address indexed player, CoinSide result, uint256 payoutAmount, uint256 feeAmount, uint256 indexed vrfRequestId, bool playerWon);
    event FeeWalletUpdated(address indexed newFeeWallet);
    event FeePercentageUpdated(uint256 newFeePercentage);
    event MaxWagerUpdated(uint256 newMaxWager);
    event MinWagerUpdated(uint256 newMinWager);
    event VRFParametersUpdated(uint256 newSubscriptionId, bytes32 newKeyHash, uint32 newCallbackGasLimit);
    event RandomWordReceived(uint256 indexed gameId, uint256 indexed vrfRequestId, uint256 randomWord); 